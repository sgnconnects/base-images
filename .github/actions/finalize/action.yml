name: "Autogenerate"
description: "Generate Dockerfiles and Stackbrew Library files"
inputs:
  json:
    description: "JSON stringified object containing all the inputs from the calling workflow"
    required: true
  secrets:
    description: "JSON stringified object containing all the secrets from the calling workflow"
    required: true
  variables:
    description: "JSON stringified object containing all the variables from the calling workflow"
    required: true
runs:
  using: "composite"
  steps:
    - name: Setup Node.js 16.x
      uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3
      with:
        node-version: 16.x

    - name: Install dependencies
      shell: bash
      run: |
        npm ci

    # FIXME: remove 'supervisor' from the 'all' target
    - name: Generate Dockerfiles
      shell: bash
      run: |
        npm run os-arch
        npm run os-device
        npm run stack-arch
        npm run stack-device

    # FIXME: remove 'supervisor' from the 'all-lib' target
    - name: Generate Stackbrew Library files
      shell: bash
      run: |
        npm run os-arch-lib
        npm run os-device-lib
        npm run stack-arch-lib
        npm run stack-device-lib

    # TODO: do we need this?
    # - name: Generate DockerHub descriptions
    #   shell: bash
    #   run: |
    #     all-dockerhub

    - name: Check for GitHub App private key
      id: gh_app_private_key
      shell: bash
      run: |
        if [ -n '${{ fromJSON(inputs.secrets).GH_APP_PRIVATE_KEY }}' ]
        then
          echo 'found=true' >> $GITHUB_OUTPUT
        else
          echo 'found=false' >> $GITHUB_OUTPUT
        fi

    # https://github.com/marketplace/actions/github-app-token
    - name: Generate GitHub App installation token
      uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1.8.0
      if: steps.gh_app_private_key.outputs.found == 'true'
      id: gh_app_installation_token
      with:
        app_id: ${{ fromJSON(inputs.json).app_id }}
        installation_id: ${{ fromJSON(inputs.json).installation_id }}
        private_key: ${{ fromJSON(inputs.secrets).GH_APP_PRIVATE_KEY }}
        permissions: ${{ fromJSON(inputs.json).token_scope }}

    # https://github.com/crazy-max/ghaction-import-gpg
    - name: Import GPG private key
      id: import-gpg
      uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549 # v5.2.0
      with:
        gpg_private_key: ${{ fromJSON(inputs.secrets).GPG_PRIVATE_KEY }}
        passphrase: ${{ fromJSON(inputs.secrets).GPG_PASSPHRASE }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    # https://github.com/actions/checkout
    - name: Checkout base-images @ master
      uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3
      with:
        repository: balena-io-library/base-images
        token: ${{ steps.gh_app_installation_token.outputs.token || fromJSON(inputs.secrets).FLOWZONE_TOKEN }}
        ref: master
        path: base-images

    - name: Commit Dockerfiles
      shell: bash
      id: commit
      working-directory: base-images
      env:
        GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
      run: |
        cp -a ../balena-base-images/* balena-base-images/
        echo "status=$(git status --porcelain balena-base-images)" >> $GITHUB_OUTPUT
        git add balena-base-images
        git commit -m "Autogenerated Dockerfiles" -m "[skip ci]"
        git show -1

    # push using the ephemeral token from the clone step
    - name: Push to base-images @ master
      shell: bash
      working-directory: base-images
      if: |
        steps.commit.outputs.status != '' &&
        (
          github.event_name == 'pull_request' ||
          github.event_name == 'pull_request_target'
        ) && (
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        )
      run: |
        git push origin HEAD:refs/heads/master

    # https://github.com/actions/checkout
    - name: Checkout official-images @ master
      uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3
      with:
        repository: balena-io-library/official-images
        token: ${{ steps.gh_app_installation_token.outputs.token || fromJSON(inputs.secrets).FLOWZONE_TOKEN }}
        ref: master
        path: official-images

    - name: Commit Library files
      shell: bash
      id: commit_lib
      working-directory: official-images
      env:
        GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
      run: |
        cp -a ../library/* library/
        echo "status=$(git status --porcelain library)" >> $GITHUB_OUTPUT
        git add library
        git commit -m "Autogenerated libs" -m "[skip ci]"
        git show -1

    # push using the ephemeral token from the clone step
    - name: Push to official-images @ master
      shell: bash
      working-directory: official-images
      if: |
        steps.commit_lib.outputs.status != '' &&
        (
          github.event_name == 'pull_request' ||
          github.event_name == 'pull_request_target'
        ) && (
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        )
      run: |
        git push origin HEAD:refs/heads/master
